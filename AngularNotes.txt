					ANGULAR

Short Bible: https://angular.io



	*** Inicio del servidor Angular ***

- ubicar en la terminal, carpeta de la aplicacion.

siguiente comanda para iniciar:

	ng serve -o

	*** Creacion de nuevo proyecto en la misma carpeta (Desde consola) ***

- ubicar en la terminal, carpeta de la aplicacion.


siguiente comanda para iniciar:

	ng new nombreApp

- Clases

Las definiciones de las clases se han de estipular en el archivo "component.ts", 
al definirse como propiedad nos permite reutilizarlo (MODULARIZACION).

- El llamado a propiedades se hace con el uso de dobles llaves.


Los componentes en Angular se pueden crear y deben de estar compuestos, neceariamente, por:

Decorador: -Selector
	   -Template
	   -Style

Clase:	   -Propiedades/atributos
	   -Metodos
	   -Constructor 

Asu vez, el componente puede contener componentes dentro de si.

La obligatoriedad radica en que solo debe de existir un solo documento HTML (SPA).


CREACION DE COMPONENTES:  (FORMA MANUAL)

Los componentes seran extensiones de la carpeta "app" de la aplicacion, por ende, deberan de estar contenidos en la misma como sub-carpetas, la creacion es tal cual sigue:

- Boton derecho sobre "app".
- Nueva carpeta "con el nombre del modulo"
- Boton derecho sobre la nueva carpeta y agregar "files" segun deseemos, respetando la comenclatura de Angular ("nombre".component.ts) y lo mas IMPORTANTE, la extension "ts", pues es un archivo Typescript.

El componente sera conformado por el componente y el decorador:

- se debe de de crear la clase:

IMPERATIVO que la clase contenga el modificador de acceso "export" pues es lo que permitira acceder a la clase desde el archivo.

- Encima de la clase (RESPETAR LA COMPOSICION) se ha de crear el DECORADOR, 
la sintaxis sera : @Component + la linea de importacion (NECESARIO) 

import { Component } from "@angular/core";

@Component({


*** EN ESTE AMBITO (DENTRO DEL PARENTESIS Y LA LLAVE) DEBERA DE CONTENER NUESTRO CODIGO

 	selector:"app-nombreAPP", ***LA SEPARACION SE HACE CON COMAS
	templateUrl: "./nombreAPP.component.html" *** EL TEMPLATE HA DE APUNTAR AL ARCHIVO HTML Y CON LA RUTA ABOSULUTA PUES ES UNA CARPETA CONTENIDA Y SE HA DE DIRECCIONAR CORRECTAMENTE
	styleUrls: "./nombreApp.component.css" *** EL STYLE Y LA DIRECCION ES OPCIONAL

})

Dentro de la carpeta de la nueva APP se ha de crear conjuntamente, el archivo HTML y el Style

- Finalmente, luego de crear cada elemento del nuevo componente, se debe de REGISTRAR,
el registro se debe de ejecutar en "app.module.ts"

ubicando el


@NgModule({ *** SIEMPRE EN ESTE ELEMENTO
  declarations: [
    AppComponent, nombreAPPComponent  ----- EN ESTA UBICACION Y SIGUIENDO LA MISMA EN CASO DE MAS MODULOS A AGREGAR ----
  ]

SIGUIENDO, debemos de incluir el componente dentro del archivo raiz HTML 

Incluimos el nuevo componente como sigue, con el selector "app-nombreApp"

ejm: <app-nombreAPP></app-nombreAPP> *** TAL CUAL ESTA SINTAXIS


***  CREACION DE UN NUEVO MODULO DE FORMA AUTOMATICA ***

DESDE LA CONSOLA TERMINAL, DENTRO DE LA CARPETA DE LA APP

INDICAR EL SIGUIENTE COMANDO:

  ng g c "nombreComponenteNuevo" + Tecla Enter (FORMA ABREVIADA)

  ng generate component "nombreComponente" (FORMA COMPLETA)


		*** CODIGO INLINE ***

Para insertar varias lineas inline, se debe de usar el siguiente caracter (``)y dentro del mismo, las lineas de codigo a insertar

ejm:

	template:`
	   <p>
		ejemplo de eso
	   </p>
		` 

		*** INTERPOLACION ANGULAR ***  (PERMITE EL TEXTO DINAMICO)


	Es la creacion de una propiedad en la clase, y referenciarla en la plantilla "HTML", la misma se referencia se hace con doble llave "{{}}".


		*** PROPERTY BINDING ***

Una de las maneras de establecer el Binding, es ubicar la propiedad en el objeto, y el valor, indicarlo en "[]" para verificar.

ejem: 

	<input type="checkbox" name="registro" value=""  [checked] ="userRegis"/> -- SIENDO EL [checked] el valor a verificar con la propiedad de la clase "userRegis".

El llamado a funciones desde el HTML, se debe de ejecutar de multiples maneras, entre las cuales, las que conllevan sin evento alguno sino con el flujo del codigo:

	{{getRegistroUsuario()}} -- DE ESTA FORMA --


		*** EVENT BINDING ***


Puente mediante a eventos desencadenados por el raton.

El "EVENT BINDING" se ha de ubicar en la etiqueta HTML del objeto que desencadernara la funcion del mismo, tal cual los principios de JavaScript; la sintaxis a seguir 

	<input type="checkbox" name="registro" value=""  [checked] ="userRegis"(click)="showmeRegister()"/> <!--EL EVENT BINDING se debe ubicar en la etiqueta HTML del objeto que desencadenara el evento -->
								--- EJM: llamado a la funcion con el objeto check box, mediante el click ---

	
	*** FUNCIONES CON PARAMETROS ***


Las funciones pueden hacer usos de los eventos adjuntados como objetos en los parametros, lo cual nos proporciona el acceso de multiples metodos del mismo,
con el "event" existe una clase y sus metodos del mismo, para hacer uso de la misma se ha de ejecutar el nombre y el tipo de objeto como parametro:

ejm: clase "Event"
		-- "nombre" = nombre del parametro : "Event" tipo de parametro, en este caso es un "Event"
nombreFuncion(nombre:Event)

             //USO DEL OBJETO CREADO EN EL EVENTO COMO PARAMETRO, SE DEBE DE IDENTIFICAR : NOMBRE DEL PARAMETRO Y TIPO EJM: "event:Event"
  showmeRegister(event:Event) { //FUNCION DEL EVENTO SOBRE EL CHECKBOX
    //alert("user register"); // LAS FUNCIONES DE JAVASCRIPT FUNCIONAN PARECIDO AL TYPESCRIPT
    //this.textoRegistro = "User Registred Sucesfully";
    //alert(event.target);

    // EL LLAMADO AL OBJETO "EVENT" PARA USO DEL IF, SE DEBE DE EJECUTAR DENTRO DE UNA ETIQUETA PARA RECOGER LOS VALORES
    if ((<HTMLInputElement> event.target).value == "si") { // EL CONDICIONAL DEL IF ESTA CASTEANDO EL OBJETO PARA OBTENER EL VALUE
      this.textoRegistro = "Just Register";
    } else {
      this.textoRegistro = "Nobody register yet";
    }
  }


	*** TWO WAY BINDING ***

- Directiva ngModel
- Banana in Box = [()] --- Binding Bidireccional


Para el uso de la directiva "ngModel" se ha de importar desde el modulo, desde "app-Module.ts", ubicando el import e insertando "FormsModule", como sigue:

import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent, EmpleadosComponent, EmpleadoComponent // ACA DEBEMOS DE REGISTRAR CADA MOSULO QUE CREEMOS SEPARADOS POR COMAS PARA DISPARARLO
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule --- INSERCION DE LA FORMSMODULE PARA USO DE LA DIRECTIVA "ngModule" en el binding bidireccional ---
  ],
  providers: [],
  bootstrap: [AppComponent]
})


		*** SINTESIS ***

- Edicion HTML, en la plantilla "app.component.html" (BOOTSTRAP, Y DEMAS).
- Creacion y edicion de clases, atributos, metodos y demas (RUDE CODE), en la plantilla: "app.component.ts". 
- EL BANANA IN BOX ES EL QUE PERMITE LA TRASLACION DEL VALOR DEL CUADRO TEXTO A LA VARIABLE.
- instalar uso de Bootstrap:

Mediante la consola :

	 npm install bootstrap@next

- Ubicar el archivo "Angular Json".
- Ubicar el apartado "styles" e insertar la ruta abosluta de la ubicacion de bootstrap : "node_modules/bootstrap/dist/css/bootstrap.css"
- repetir la direccion en el apartado "scripts" pero cambiar el archivo "css" por "js" unicamente en este apartado: "node_modules/bootstrap/dist/js/bootstrap.js"



		*** DIRECTIVAS ***

	Permiten agregar y eliminar elemntos de la aplicacion mediante el DOM (etiquetas HTML).


3 tipos:
- Componente: 
	a) directiva Angular: @Component, @Module
	b) directiva Personalizada: Custom.
- Estructura:
	entre muchas estan:
	- ngIf
	- ngFor
	- ngSwitch
	- ngPlural
	- ngTemplate
	- ngComponnetOutlet 
- Atributo:
	- ngClass
	- ngStyle
	- ngModel

ejm:
		la sintaxis es basicamente una sintesis de un metodo, en el caso del if, dentro de una etiqueta html.

	
      <!--USO DE LA DIRECTIVA ngIF, LA SINTAXIS ES TAL CUAL CON ASTERISCO : "*ngIf""-->
  <div *ngIf ="register">{{message}}</div>

--- MODIFICA LA ESTRUCTURA DEL DOM ---
